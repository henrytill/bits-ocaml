#!/bin/sh

set -e

PROJECT_ROOT=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd -P)

create_build_dir() {
    if [ $# -ne 1 ]; then
        printf "Usage: create_build_dir <build_dir>\n"
        exit 1
    fi

    local build_dir="$1"

    mkdir -p "$build_dir"

    for dir in src test; do
        cp -asf "${PROJECT_ROOT}/${dir}" "${build_dir}/"
    done

    ln -sf "${PROJECT_ROOT}/GNUmakefile" "${build_dir}/GNUmakefile"

    find "$build_dir" -name .merlin -delete
}

generate_dot_merlin() {
    if [ $# -ne 1 ]; then
        printf "Usage: generate_dot_merlin <build_dir>\n"
        exit 1
    fi

    local build_dir="$1"

    local dot_merlin="${PROJECT_ROOT}/.merlin"
    :>"$dot_merlin"

    local build_path=$(realpath --relative-to="$PROJECT_ROOT" "$build_dir")

    cat >"$dot_merlin" <<EOF
S src
S test
B ${build_path}/src
B ${build_path}/test
EOF
}

usage() {
    printf "Usage: $0 [-d BUILD_DIR] [-h]\n"
    printf "  -d BUILD_DIR  Specify the build directory\n"
    printf "  -h            Display this help message\n"
}

main() {
    local build_dir="$PROJECT_ROOT" # Default to project root

    # Parse command-line arguments
    while [ $# -gt 0 ]; do
        case "$1" in
            -d)
                if [ -n "$2" ]; then
                    build_dir=$(realpath "$2")
                    shift 2
                else
                    printf "Error: -d requires a directory argument.\n"
                    exit 1
                fi
                ;;
            -h)
                usage
                exit 0
                ;;
            *)
                printf "Unknown option: $1\n"
                usage
                exit 1
                ;;
        esac
    done

    # If build_dir is different from PROJECT_ROOT, set up out-of-tree build
    printf "checking for out of tree build... "
    if [ "$build_dir" != "$PROJECT_ROOT" ]; then
        printf "yes\n"
        create_build_dir "$build_dir"
    else
        printf "no\n"
    fi

    generate_dot_merlin "$build_dir"

    printf "Build directory: %s\n" "$build_dir"
    printf "OK\n"
}

main "$@"

# Notes
# =====
#
# On `PROJECT_ROOT`, see:
# https://stackoverflow.com/questions/29832037/how-to-get-script-directory-in-posix-sh
#
# On `cp -as`, see:
# https://unix.stackexchange.com/questions/196537/how-to-copy-a-folder-structure-and-make-symbolic-links-to-files
#
# On the choice to use `local`, see:
# https://stackoverflow.com/questions/18597697/posix-compliant-way-to-scope-variables-to-a-function-in-a-shell-script
